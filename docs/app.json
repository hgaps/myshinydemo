[{"name":"app.R","content":"library(shiny)\r\nlibrary(dplyr)\r\n\r\n# Initialize the data\r\nset.seed(123) # For reproducibility\r\nacademics <- data.frame(\r\n  name = paste(\"Academic\", 1:50),\r\n  weight = rep(1, 50),\r\n  allocations = rep(0, 50),\r\n  unavailable_rounds = rep(0, 50)\r\n)\r\n\r\n# Function to select a pair of academics\r\nselect_pair <- function(academics, exclude = NULL) {\r\n  if (!is.null(exclude)) {\r\n    academics <- academics[!academics$name %in% exclude, ]\r\n  }\r\n  selected <- sample_n(academics, 2, weight = academics$weight)\r\n  return(selected)\r\n}\r\n\r\n# Function to update the list after selection\r\nupdate_academics <- function(academics, selected, unavailable = NULL) {\r\n  if (!is.null(unavailable)) {\r\n    academics$weight[academics$name %in% unavailable$name] <- academics$weight[academics$name %in% unavailable$name] * 5\r\n    academics$unavailable_rounds[academics$name %in% unavailable$name] <- academics$unavailable_rounds[academics$name %in% unavailable$name] + 1\r\n    \r\n    # Replace unavailable academics\r\n    replacements <- academics[!academics$name %in% c(selected$name, unavailable$name), ]\r\n    replacements <- sample_n(replacements, nrow(unavailable), weight = replacements$weight)\r\n    for (i in 1:nrow(unavailable)) {\r\n      selected[selected$name == unavailable$name[i], ] <- replacements[i, ]\r\n    }\r\n  }\r\n  \r\n  academics$allocations[academics$name %in% selected$name] <- academics$allocations[academics$name %in% selected$name] + 1\r\n  academics$weight[academics$name %in% selected$name] <- academics$weight[academics$name %in% selected$name] * 0.5\r\n  \r\n  academics <- bind_rows(academics[!academics$name %in% selected$name, ], academics[academics$name %in% selected$name, ])\r\n  return(list(academics = academics, selected = selected))\r\n}\r\n\r\n# Define UI for application\r\nui <- fluidPage(\r\n  titlePanel(\"Examiner Allocation System\"),\r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      actionButton(\"request_pair\", \"Request Pair of Examiners\"),\r\n      textInput(\"unavailable_1\", \"Unavailable Examiner 1 (if any)\", \"\"),\r\n      textInput(\"unavailable_2\", \"Unavailable Examiner 2 (if any)\", \"\"),\r\n      actionButton(\"update_pair\", \"Update Pair\")\r\n    ),\r\n    mainPanel(\r\n      textOutput(\"selected_pair\"),\r\n      textOutput(\"final_pair\")\r\n    )\r\n  )\r\n)\r\n\r\n# Define server logic\r\nserver <- function(input, output, session) {\r\n  selected_pair <- reactiveVal(NULL)\r\n  academics_data <- reactiveVal(academics)\r\n  \r\n  observeEvent(input$request_pair, {\r\n    selected <- select_pair(academics_data())\r\n    selected_pair(selected)\r\n    output$selected_pair <- renderText({\r\n      paste(\"Initially selected pair: \", paste(selected$name, collapse = \" and \"))\r\n    })\r\n    output$final_pair <- renderText(\"\")\r\n  })\r\n  \r\n  observeEvent(input$update_pair, {\r\n    if (is.null(selected_pair())) return(NULL)\r\n    \r\n    unavailable_1 <- input$unavailable_1\r\n    unavailable_2 <- input$unavailable_2\r\n    unavailable <- academics_data() %>% filter(name %in% c(unavailable_1, unavailable_2))\r\n    \r\n    if (nrow(unavailable) > 0) {\r\n      result <- update_academics(academics_data(), selected_pair(), unavailable)\r\n      academics_data(result$academics)\r\n      selected_pair(result$selected)\r\n      output$final_pair <- renderText({\r\n        paste(\"Updated pair: \", paste(result$selected$name, collapse = \" and \"))\r\n      })\r\n    } else {\r\n      academics_data(update_academics(academics_data(), selected_pair(), NULL)$academics)\r\n      output$final_pair <- renderText({\r\n        paste(\"Final pair: \", paste(selected_pair()$name, collapse = \" and \"))\r\n      })\r\n    }\r\n  })\r\n}\r\n\r\n# Run the application \r\nshinyApp(ui = ui, server = server)\r\n","type":"text"}]
